generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id           String    @id @default(cuid())
  userId       String    @unique
  startupIdea  String    @default("")
  skills       String[]  @default([])
  experience   String    @default("")
  interests    String[]  @default([])
  lookingFor   String    @default("")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Connection {
  id                String    @id @default(cuid())
  userId            String
  name              String
  title             String
  company           String
  mutualConnections Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Blog {
  id          String   @id @default(cuid())
  query       String
  title       String
  link        String   @unique
  author      String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Courseracourse {
  id               String   @id @default(cuid())
  query            String
  name             String
  registrationLink String   @unique
  description      String
  thumbnail        String
  workload         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Udemycourse {
  id               String   @id @default(cuid())
  query            String
  name             String
  registrationLink String   @unique
  description      String
  rating           Float
  thumbnail        String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Playlist {
  id        String   @id @default(cuid())
  query     String
  title     String
  link      String   @unique
  thumbnail String
  channel   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mentor {
  id           String    @id @default(uuid())
  name         String
  title        String?   // Optional field for mentor title
  profileImage String?
  hourlyRate   Float?
  domains      String[]  // Assuming domains are stored as an array
  bio          String?
  availability String?
  bookings     Booking[]
}

model Booking {
  id        String   @id @default(uuid())
  mentorId  String
  userId    String
  time      String   // Stored as "YYYY-MM-DD HH:MM" or ISO string
  createdAt DateTime @default(now())
  mentor    Mentor   @relation(fields: [mentorId], references: [id])
}